service: rewards
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getRewards:
    handler: handler.getRewards
    events:
      - httpApi:
          path: /rewards
          method: post
  postReward:
    handler: handler.postRewards
    events:
      - httpApi:
          path: /reward
          method: post
  deleteReward:
    handler: handler.deleteRewards
    events:
      - httpApi:
          path: /rewards/:id
          method: delete
  login:
    handler: handler.login
    events:
      - httpApi:
          path: /login
          method: post

  #      - websocket: $connect
  #      - s3: ${env:BUCKET}
  #      - schedule: rate(10 minutes)
  #      - sns: greeter-topic
  #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
  #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
  #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
  #      - iot:
  #          sql: "SELECT * FROM 'some_topic'"
  #      - cloudwatchEvent:
  #          event:
  #            source:
  #              - "aws.ec2"
  #            detail-type:
  #              - "EC2 Instance State-change Notification"
  #            detail:
  #              state:
  #                - pending
  #      - cloudwatchLog: '/aws/lambda/hello'
  #      - cognitoUserPool:
  #          pool: MyUserPool
  #          trigger: PreSignUp
  #      - alb:
  #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
  #          priority: 1
  #          conditions:
  #            host: example.com
  #            path: /hello

  #    Define function environment variables here
  #    environment:
  #      variable2: value2

  # you can add CloudFormation resource templates here
  #resources:
  # Resources:
  #   MongoLayer:
  #     Type: AWS::Serverless::LayerVersion
  #     Properties:
  #       LayerName: layerMongo
  #       Description: Layer that contains one version of Mongo library
  #       LicenseInfo: "Available under the MIT license."
  #       ContentUri: ./mongo-layer
  #       CompatibleRuntimes:
  #         - nodejs14.x
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
